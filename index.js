
require("dotenv").config(); // ‚Üê „Åì„Åì„ÅåÊäú„Åë„Å¶„ÅÑ„Åü ‚úÖ
console.log("‚úÖ MONGO_URI:", process.env.MONGO_URI);

const express = require("express");
const { Client, middleware } = require("@line/bot-sdk");
const { OpenAI } = require("openai");
const axios = require("axios");
const { genreMap, budgetMap, keywordSuggestions } = require("./hotpepper_keyword_map");
const { MongoClient } = require("mongodb");

const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);

const app = express();

app.post("/webhook/stripe", express.raw({ type: "application/json" }), async (req, res) => {
  const sig = req.headers["stripe-signature"];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_ENDPOINT_SECRET);
  } catch (err) {
    console.error("‚ùå StripeÁΩ≤ÂêçÊ§úË®º„Ç®„É©„Éº:", err);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  switch (event.type) {
   case "checkout.session.completed": {
  const session = event.data.object;

  const subscriptionId = session.subscription;

  // üî•„ÄêÈáçË¶Å„Äë„Åì„Åì„ÅßSubscription„ÇíÂÜçÂèñÂæó„Åó„Å¶metadata„ÇíÂæó„Çã
  const subscription = await stripe.subscriptions.retrieve(subscriptionId);

  const lineUserId = subscription.metadata?.lineUserId;
  const purchasedPlanId = subscription.metadata?.planId;

  if (!lineUserId || !purchasedPlanId) {
    console.error("‚ùå metadataÊ¨†ËêΩ„Ç®„É©„Éº: lineUserId„Åæ„Åü„ÅØplanId„Åå„ÅÇ„Çä„Åæ„Åõ„Çì");
    return res.status(400).end();
  }

  await userDB.updateOne(
    { userId: lineUserId },
    {
      $set: {
        subscribed: true,
        stripeCustomerId: session.customer,
        planId: purchasedPlanId,
        usageCount: 0,
        usageMonth: new Date().getMonth(),
        updatedAt: new Date()
      }
    },
    { upsert: true }
  );
  console.log(`‚úÖ „É¶„Éº„Ç∂„Éº ${lineUserId} „Çísubscribed„Å´Êõ¥Êñ∞Ôºà„Éó„É©„É≥: ${purchasedPlanId}Ôºâ`);
  break;
}


    case "customer.subscription.deleted":
    case "customer.subscription.updated": {
      const subscription = event.data.object;
      const customerId = subscription.customer;
      const subscriptionPlanId = subscription.items.data[0].price.id; // subscriptionÊõ¥Êñ∞ÊôÇ„ÅÆ„Åøprice.id‰ΩøÁî®

      if (subscription.status === "active") {
        await userDB.updateOne(
          { stripeCustomerId: customerId },
          { $set: { subscribed: true, planId: subscriptionPlanId, updatedAt: new Date() } }
        );
        console.log(`‚úÖ „Éó„É©„É≥Êõ¥Êñ∞ÔºàCustomer ID: ${customerId}Ôºâ„ÇíÂèçÊò†„Åó„Åæ„Åó„Åü`);
      } else {
        await userDB.updateOne(
          { stripeCustomerId: customerId },
          { $set: { subscribed: false, updatedAt: new Date() } }
        );
        console.log(`üö´ Ëß£Á¥ÑÂá¶ÁêÜÔºàCustomer ID: ${customerId}Ôºâ„ÇíÂèçÊò†„Åó„Åæ„Åó„Åü`);
      }
      break;
    }

    default:
      console.log(`ü§∑‚Äç‚ôÇÔ∏è Êú™Âá¶ÁêÜ„ÅÆ„Ç§„Éô„É≥„Éà„Çø„Ç§„Éó ${event.type}`);
  }

  res.status(200).end();
});





const mongoClient = new MongoClient(process.env.MONGO_URI);
let userDB;

mongoClient.connect()
  .then(client => {
    console.log("‚úÖ MongoDBÊé•Á∂öÊàêÂäü");
    userDB = client.db("linebot").collection("users");

    // ‚úÖ MongoDBÊé•Á∂öÊàêÂäüÂæå„Å´Express„ÇíËµ∑Âãï
    const PORT = process.env.PORT || 1000;
    app.listen(PORT, () => {
      console.log(`‚úÖ Bot is running on port ${PORT}`);
    });
  })
  .catch(err => {
    console.error("‚ùå MongoDBÊé•Á∂ö„Ç®„É©„Éº:", err);
  });

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

const client = new Client(config); // ‚úÖ LINE SDK„ÅÆ„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
const sessionStore = {}; // ‚úÖ „É¶„Éº„Ç∂„Éº„Åî„Å®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥Ë®òÈå≤Áî®Ôºà„É°„É¢„É™‰øùÂ≠òÔºâ


const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});
const HOTPEPPER_API_KEY = process.env.HOTPEPPER_API_KEY;

// üî• Stripe„ÅÆ„Éó„É©„É≥ÂÆöÁæ©Ôºà„Çà„Çä„Çè„Åã„Çä„ÇÑ„Åô„ÅèÊîπÂñÑÔºâ
const stripePlans = {
  basic: {
    priceId: "price_1Rc4DbCE2c7uO9vomtr7CWPk",
    usageLimit: 20,
    label: "„Éô„Éº„Ç∑„ÉÉ„ÇØÔºàÊúà500ÂÜÜÔºâ"
  },
  standard: {
    priceId: "price_1RgOITCE2c7uO9vor59pbAx2",
    usageLimit: 40,
    label: "„Çπ„Çø„É≥„ÉÄ„Éº„ÉâÔºàÊúà1000ÂÜÜÔºâ"
  },
  premium: {
    priceId: "price_1RgOJzCE2c7uO9voM5P9BmIH",
    usageLimit: Infinity,
    label: "„Éó„É¨„Éü„Ç¢„É†ÔºàÊúà2000ÂÜÜ„ÉªÁÑ°Âà∂ÈôêÔºâ"
  }
};



app.post("/create-checkout-session", express.json(), async (req, res) => {
  const { userId, plan } = req.body;

  // ======= ËøΩÂä†: ÂøÖÈ†à„ÉÅ„Çß„ÉÉ„ÇØ„Å®„É≠„Ç∞ =======
  console.log("üü¢ Checkout Session‰ΩúÊàê„É™„ÇØ„Ç®„Çπ„Éà:", userId, plan);
  // userId/plan„ÅåÁ©∫„Å™„Çâ„Åì„Åì„ÅßÊ≠¢„ÇÅ„ÇãÔºà„Åì„Çå„ÅßWebhook„Ç®„É©„Éº„ÅØÁµ∂ÂØæËµ∑„Åç„Å™„Åè„Å™„ÇãÔºâ
  if (!userId || !plan) {
    console.error("‚ùå userId „Åæ„Åü„ÅØ plan „ÅåÊú™ÂÆöÁæ©„Åß„Åô");
    return res.status(400).json({ error: "userId„Åæ„Åü„ÅØplan„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ" });
  }
  // ======= „Åì„Åì„Åæ„ÅßËøΩÂä† =======

  if (!stripePlans[plan]) {
        console.error("‚ùå ÁÑ°Âäπ„Å™„Éó„É©„É≥ÊåáÂÆö:", plan);
    return res.status(400).json({ error: "ÁÑ°Âäπ„Å™„Éó„É©„É≥„Åß„Åô„ÄÇ" });
  }

  const priceId = stripePlans[plan].priceId;
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: "subscription",
      line_items: [{ 
        price: priceId, 
        quantity: 1,
      }],
      subscription_data: {
        metadata: { lineUserId: userId, planId: priceId }, // ÂøÖ„Åösubscription_data„Å´„É°„Çø„Éá„Éº„ÇøË®≠ÂÆö
      },
      success_url: "https://line-gourmet-bot.onrender.com/success",
      cancel_url: "https://line-gourmet-bot.onrender.com/cancel",
      metadata: { lineUserId: userId, planId: priceId } // Checkout SessionÊú¨‰Ωì„Å´„ÇÇËøΩÂä†Ë®≠ÂÆö
    });
       console.log("‚úÖ Checkout Session‰ΩúÊàêÊàêÂäü: sessionId=", session.id);
    res.json({ url: session.url });

  } catch (err) {
    console.error("‚ùå Checkout Session‰ΩúÊàê„Ç®„É©„Éº:", err);
    res.status(500).json({ error: err.message });
  }
});

app.post("/create-portal-session", express.json(), async (req, res) => {
  const { userId } = req.body;

  try {
    const user = await userDB.findOne({ userId });

    if (!user || !user.stripeCustomerId) {
      return res.status(404).json({ error: "Stripe„ÅÆÈ°ßÂÆ¢ID„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì" });
    }

    const portalSession = await stripe.billingPortal.sessions.create({
      customer: user.stripeCustomerId,
      return_url: "https://line.me",
    });

    res.json({ url: portalSession.url });
  } catch (err) {
    console.error("‚ùå „Ç´„Çπ„Çø„Éû„Éº„Éù„Éº„Çø„É´„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê„Ç®„É©„Éº:", err);
    res.status(500).json({ error: err.message });
  }
});



function extractShopNames(text) {
  return text.match(/Â∫óÂêç: (.+)/g)?.map(line => line.replace("Â∫óÂêç: ", "").trim()) || [];
}

async function fetchShops(keyword, genreCode = "", budgetCode = "") {
  let all = [];
  for (let start = 1; start <= 100; start += 20) {
    const params = {
      key: HOTPEPPER_API_KEY,
      count: 20,
      start,
      format: "json"
    };
    if (keyword && keyword !== "Êú™ÊåáÂÆö") params.keyword = keyword;
    if (genreCode) params.genre = genreCode;
    if (budgetCode) params.budget = budgetCode;
    const { data } = await axios.get("https://webservice.recruit.co.jp/hotpepper/gourmet/v1/", { params });
    if (!data.results.shop || data.results.shop.length === 0) break;
    all = all.concat(data.results.shop);
  }
  return all;
}




app.post("/webhook", middleware(config), async (req, res) => { 
  try {
    const events = req.body.events;
    await Promise.all(events.map(async (event) => {
      const userId = event.source.userId;

      if (event.type === "message" && event.message.type === "text") {
        const userInput = event.message.text;


        // üî•„Äê„Åì„Åì„Å´ËøΩÂä†„Äëüî•
        const userDoc = await userDB.findOne({ userId });

        // ‚ë† userDoc„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥ÂêàÔºàÂàùÂõû„É¶„Éº„Ç∂„ÉºÔºâ„ÇíÂÖà„Å´Âá¶ÁêÜ
if (!userDoc) {
  await userDB.insertOne({
    userId,
    usageCount: 1,
    subscribed: false,
    previousStructure: null,
    allShops: [],
    shown: [],
    original: userInput,
    usageMonth: new Date().getMonth(),
    updatedAt: new Date()
  });
  console.log("üÜï Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤Ôºö1ÂõûÁõÆÁÑ°Êñô„ÅßÁ∂öË°å");
} else {
  // ‚ë° userDoc„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºàÈÄöÂ∏∏Âá¶ÁêÜÔºâ
  
  let usageLimit = 1; // ÁÑ°Êñô„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
  if (userDoc.subscribed) {
    switch (userDoc.planId) {
      case "price_1Rc4DbCE2c7uO9vomtr7CWPk":
        usageLimit = 20;
        break;
      case "price_1RgOITCE2c7uO9vor59pbAx2":
        usageLimit = 40;
        break;
      case "price_1RgOJzCE2c7uO9voM5P9BmIH":
        usageLimit = Infinity;
        break;
    }
  }

  const currentMonth = new Date().getMonth();
  if (userDoc.usageMonth !== currentMonth) {
    await userDB.updateOne(
      { userId },
      { $set: { usageCount: 0, usageMonth: currentMonth } }
    );
    userDoc.usageCount = 0; // „É™„Çª„ÉÉ„Éà„ÇíÂèçÊò†
  }
 }
     
// üî• „Åæ„Åö„ÅØ„ÄêËß£Á¥Ñ„Éª„Ç≠„É£„É≥„Çª„É´„Äë„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÊúÄÂÑ™ÂÖà
if (userInput.includes("Ëß£Á¥Ñ") || userInput.includes("„Ç≠„É£„É≥„Çª„É´")) {
  const response = await axios.post("https://line-gourmet-bot.onrender.com/create-portal-session", { userId });
  const portalUrl = response.data.url;

  return client.replyMessage(event.replyToken, {
    type: "text",
    text: `üîß „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅÆËß£Á¥Ñ„ÅØ„Åì„Å°„Çâ:\n${portalUrl}`
  });
}

// üî• Ê¨°„Å´„Äê„Éó„É©„É≥Â§âÊõ¥„Äë„ÅÆÂá¶ÁêÜ
else if (userInput.includes("„Éó„É©„É≥Â§âÊõ¥")) {
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: "üîß „ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
    quickReply: {
      items: Object.entries(stripePlans).map(([planKey, details]) => ({
        type: "action",
        action: {
          type: "postback",
          label: details.label,
          data: `action=selectPlan&plan=${planKey}`,
          displayText: `${details.label}„ÇíÈÅ∏Êäû`
        }
      }))
    }
  });
}

// üî• ÊúÄÂæå„Å´„Çµ„Éñ„Çπ„ÇØÊ∏à„É¶„Éº„Ç∂„ÉºÔºàÊúàÈñì‰ΩøÁî®ÂõûÊï∞„ÉÅ„Çß„ÉÉ„ÇØÔºâ
if (userDoc.subscribed) {
  const currentMonth = new Date().getMonth();
  if (userDoc.usageMonth !== currentMonth) {
    await userDB.updateOne(
      { userId },
      { $set: { usageCount: 0, usageMonth: currentMonth } }
    );
    userDoc.usageCount = 0;
  }

  let usageLimit = 0;
  switch (userDoc.planId) {
    case stripePlans.basic.priceId:
      usageLimit = stripePlans.basic.usageLimit;
      break;
    case stripePlans.standard.priceId:
      usageLimit = stripePlans.standard.usageLimit;
      break;
    case stripePlans.premium.priceId:
      usageLimit = Infinity;
      break;
    default:
      usageLimit = 0;
  }

  if (userDoc.usageCount >= usageLimit) {
    await client.replyMessage(event.replyToken, {
      type: "text",
      text: "üîí ‰ªäÊúà„ÅÆÂà©Áî®‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      quickReply: {
        items: Object.entries(stripePlans).map(([planKey, details]) => ({
          type: "action",
          action: {
            type: "postback",
            label: details.label,
            data: `action=selectPlan&plan=${planKey}`,
            displayText: `${details.label}„ÇíÈÅ∏Êäû`
          }
        }))
      }
    });
    return;
  } 
}


// ÈÄî‰∏≠Â∏åÊúõ„ÇÇ„Å£„Å®Èùô„Åã„Éª„Åä„Åó„ÇÉ„Çå„ÉªÂÄãÂÆ§„Å™„Å©„ÇíÂàùÂõûÂèñÂæóÊ∏à„Åø„Ç∑„Éß„ÉÉ„Éó„Åã„ÇâÂÜçÈÅ∏Âá∫„Åô„ÇãÂΩ¢Âºè
if (
  (
    userInput.includes("„ÇÇ„Å£„Å®") ||
      userInput.includes("„ÇÇ„ÅÜÂ∞ë„Åó") ||     
      userInput.includes("„ÇÇ„ÅÜ") ||
    userInput.includes("„Å°„Çá„Å£„Å®") ||  
    userInput.includes("„Åß„Åç„Çã") ||
    userInput.includes("Èùô„Åã") ||
    userInput.includes("ÂÄãÂÆ§") ||
    userInput.includes("Â§ú") ||
    userInput.includes("„Åä„Åó„ÇÉ„Çå") ||
    userInput.includes("Èõ∞Âõ≤Ê∞ó") ||
    userInput.includes("Êò†„Åà") ||
    userInput.includes("„Ç§„É≥„Çπ„ÇøÊò†„Åà") ||
    userInput.includes("ÁæéÂë≥„Åó„ÅÑ") ||
    userInput.includes("È´òÁ¥ö") ||
    userInput.includes("ÂÆâ„ÅÑ") ||
    userInput.includes("„Ç≥„Çπ„Éë") ||
    userInput.includes("ÈßÖËøë") ||
    userInput.includes("Âè£„Ç≥„Éü") ||
    userInput.includes("Ë©ïÂà§") ||
    userInput.includes("Ë≥ë„ÇÑ„Åã") ||
    userInput.includes("È£≤„ÅøÊîæÈ°å") ||
    userInput.includes("‰∫àÁ¥Ñ") ||
    userInput.includes("ËêΩ„Å°ÁùÄ„ÅÑ„Åü") ||
    userInput.includes("Â≠êÈÄ£„Çå") ||
    userInput.includes("ÈßêËªäÂ†¥") ||
    userInput.includes("Ê∑±Â§ú") ||
    userInput.includes("‰Ωø„Åà„Çã") ||
    userInput.includes("Âêå„Åò") ||
    userInput.includes("Êù°‰ª∂") ||
    userInput.includes("Â†¥ÊâÄ") ||
    userInput.includes("„É©„É≥„ÉÅ") ||
    userInput.includes("„Éò„É´„Ç∑„Éº") ||
    userInput.includes("ÂÅ•Â∫∑ÂøóÂêë") ||
    userInput.includes("„Éö„ÉÉ„Éà") ||
    userInput.includes("„ÉÜ„É©„Çπ") ||
    userInput.includes("Âú∞ÂÖÉ") ||
    userInput.includes("„ÅîÂΩìÂú∞") ||
    userInput.includes("Ë®òÂøµÊó•") ||
    userInput.includes("Ë™ïÁîüÊó•") ||
    userInput.includes("„Éá„Éº„Éà") ||
    userInput.includes("ÊµÅË°å„Çä") ||
    userInput.includes("„Éê„Ç§„Ç≠„É≥„Ç∞") ||
    userInput.includes("È£ü„ÅπÊîæÈ°å") ||
    userInput.includes("Âñ´ÁÖô") ||
    userInput.includes("Á¶ÅÁÖô") ||
     userInput.includes("Èö†„ÇåÂÆ∂") ||
      userInput.includes("ÊúâÂêç") ||
       userInput.includes("Áü•„Çã‰∫∫„ÅûÁü•„Çã") ||
        userInput.includes("ÊúâÂêç") ||
         userInput.includes("‰∫∫Ê∞ó") ||
          userInput.includes("Ë°åÂàó") ||
           userInput.includes("SNS") ||
    userInput.includes("ÂàÜÁÖô") ||
    userInput.includes("Wi-Fi") ||
    userInput.includes("ËÄÅËàó") ||
    userInput.includes("ÂêçÂ∫ó") ||
    userInput.includes("„Çπ„Ç§„Éº„ÉÑ") ||
    userInput.includes("„Éá„Ç∂„Éº„Éà") ||
    userInput.includes("Ë≤∏Âàá")
  ) &&
  sessionStore[userId]
){
// üî•„ÄêÂà©Áî®ÂõûÊï∞„Ç´„Ç¶„É≥„Éà„ÄëÔºàÂêÑ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÂÖàÈ†≠„Å´ÂÖ•„Çå„ÇãÔºâ

const userDocUpdated = await userDB.findOne({ userId });

let usageLimit = 1; // ÁÑ°Êñô„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
if (userDocUpdated.subscribed) {
  switch (userDocUpdated.planId) {
    case "price_1Rc4DbCE2c7uO9vomtr7CWPk":
      usageLimit = 20;
      break;
    case "price_1RgOITCE2c7uO9vor59pbAx2":
      usageLimit = 40;
      break;
    case "price_1RgOJzCE2c7uO9voM5P9BmIH":
      usageLimit = Infinity;
      break;
  }
}

// Âà©Áî®‰∏äÈôê„ÇíË∂Ö„Åà„ÅüÂ†¥Âêà„ÅÆÂá¶ÁêÜ
if (userDocUpdated.usageCount > usageLimit) {
  await client.replyMessage(event.replyToken, {
    type: "text",
    text: "üîí ÊúàÈñì„ÅÆÂà©Áî®ÂõûÊï∞„ÇíË∂Ö„Åà„Åæ„Åó„Åü„ÄÇ„ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ",
    quickReply: {
      items: [
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éô„Éº„Ç∑„ÉÉ„ÇØÔºàÊúà500ÂÜÜ„Éª20ÂõûÔºâ",
            data: "action=selectPlan&plan=basic",
            displayText: "„Éô„Éº„Ç∑„ÉÉ„ÇØ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Çπ„Çø„É≥„ÉÄ„Éº„ÉâÔºàÊúà1000ÂÜÜ„Éª40ÂõûÔºâ",
            data: "action=selectPlan&plan=standard",
            displayText: "„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éó„É¨„Éü„Ç¢„É†ÔºàÊúà2000ÂÜÜ„ÉªÁÑ°Âà∂ÈôêÔºâ",
            data: "action=selectPlan&plan=premium",
            displayText: "„Éó„É¨„Éü„Ç¢„É†„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        }
      ]
    }
  });
  return;
}

console.log(`üü¢ Âà©Áî®ÂõûÊï∞: ${userDocUpdated.usageCount}/${usageLimit}`);


 console.log("üü¢ „ÄêÈÄî‰∏≠Â∏åÊúõ„Äë„Éñ„É≠„ÉÉ„ÇØ„Å´ÂÖ•„Çä„Åæ„Åó„Åü:", userInput);

  const previous = sessionStore[userId];
  const prev = previous.previousStructure || {};
  const prevLocation = prev.location || "";
  const prevGenre = prev.genre || "";

  const gptExtractAdditional = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content:
          `Ê¨°„ÅÆÊó•Êú¨Ë™ûÊñá„Åã„Çâ‰ª•‰∏ã„ÇíÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\nÂ†¥ÊâÄ:\n„Ç∏„É£„É≥„É´:\n‰∫àÁÆó:\n„Ç≠„Éº„ÉØ„Éº„Éâ:\n„Åì„Å†„Çè„ÇäÊù°‰ª∂:`
      },
      {
        role: "user",
        content: userInput
      }
    ]
  });

  const extracted = gptExtractAdditional.choices[0].message.content;
  const location = extracted.match(/Â†¥ÊâÄ:\s*(.*)/)?.[1]?.trim();
  const genre = extracted.match(/„Ç∏„É£„É≥„É´:\s*(.*)/)?.[1]?.trim();
  const budget = extracted.match(/‰∫àÁÆó:\s*(.*)/)?.[1]?.trim();
  const keyword = extracted.match(/„Ç≠„Éº„ÉØ„Éº„Éâ:\s*(.*)/)?.[1]?.trim();
  const filters = extracted.match(/„Åì„Å†„Çè„ÇäÊù°‰ª∂:\s*(.*)/)?.[1]?.trim();

  await client.pushMessage(userId, {
    type: "text",
    text: "üîé „ÅîÂ∏åÊúõ„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÇíÊ§úÁ¥¢„Åó„Å¶„ÅÑ„Åæ„Åô‚Ä¶\nÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„Åî„Åñ„ÅÑ„Åæ„Åô.\nÂ∞ë„Åó„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑüôá‚Äç‚ôÇÔ∏è"
  });

  const finalStructure = {
    location: location || prev.location,
    genre: genre || prev.genre,
    budget: budget || prev.budget,
    keyword: keyword || prev.keyword,
    filters: filters || prev.filters
  };

  const shopList = previous.allShops
    .map(s => `Â∫óÂêç: ${s.name} / „Ç∏„É£„É≥„É´: ${s.genre.name} / Á¥π‰ªã: ${s.catch}`)
    .join("\n");

  const prompt = `
ÂâçÂõû„ÅÆÊ§úÁ¥¢Â†¥ÊâÄ: ${prevLocation}
ÂâçÂõû„ÅÆÊ§úÁ¥¢„Ç∏„É£„É≥„É´: ${prevGenre}
ËøΩÂä†„ÅÆ„ÅîÂ∏åÊúõ: ${userInput}

‰ª•‰∏ã„ÅÆÂ∫óËàó„É™„Çπ„Éà„Åã„ÇâÂ∏åÊúõ„Å´Âêà„ÅÜ„ÅäÂ∫ó„Çí1‰ª∂ÈÅ∏„Å≥„ÄÅ„ÄêÁ¥π‰ªãÊñá„Äë„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë„Äê„Çø„Ç∞„Äë„Çí„É¶„Éº„Ç∂„Éº„ÅÆÂç∞Ë±°„Å´ÊÆã„Çã„Çà„ÅÜÈ≠ÖÂäõÁöÑ„Å´Ëá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßÁ∞°ÊΩî„Å´ÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‚ñºÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºö
„ÄêÂ∫óËàóÂêç„Äë
„ÄêÁ¥π‰ªãÊñá„Äë
„ÉªÂ∫óÂêç„ÅÆ„ÅÇ„Å®„Å´„ÅØÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÈ°îÊñáÂ≠ó„ÇÑÁµµÊñáÂ≠ó„ÇÇ1„Å§Ê∑ª„Åà„Çã„Å®È≠ÖÂäõÁöÑ„Åß„Åô
„ÉªÂÖ®‰Ωì„Åß2Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÂ∫óÂêç„Çí„ÄäÂ∫óÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ
„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë
1Ë°å‰ª•ÂÜÖ„ÅßÈ≠ÖÂäõÁöÑ„Å´
„Äê„Çø„Ç∞„Äë
È£≤È£üÂ∫óÊÉÖÂ†±„Åã„Çâ„ÄÅInstagramÈ¢®„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Å®„Åó„Å¶‰Ωø„Åà„Çã„ÄÅ„ÇÇ„Å£„Å®„ÇÇÊúÄÈÅ©„Å™„Åù„ÅÆ„ÅäÂ∫ó„ÅÆÁâπÂæ¥„Çí„Ç≠„Éº„ÉØ„Éº„Éâ„Çí3„Å§Êó•Êú¨Ë™û„ÅßÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n#Ë®òÂè∑„Çí„Å§„Åë„Å¶1Ë°å„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö#„Éá„Éº„Éà #Â§úÊôØ #„Ç≥„Çπ„ÉëÔºâ

Â∫óËàó„É™„Çπ„Éà:
${shopList}
`;

  const gptPick = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [{ role: "system", content: prompt }]
  });

const responseText = gptPick.choices[0].message.content;

console.log("‚úÖ GPT„É¨„Çπ„Éù„É≥„Çπ:", responseText);

const nameMatch = responseText.match(/„ÄêÂ∫óËàóÂêç„Äë\s*„Ää(.+?)„Äã/);
const introMatch = responseText.match(/„ÄêÁ¥π‰ªãÊñá„Äë\s*([\s\S]*?)„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë/);
const itemMatch = responseText.match(/„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\s*([\s\S]*?)„Äê„Çø„Ç∞„Äë/);
const tagMatch = responseText.match(/„Äê„Çø„Ç∞„Äë\s*(.+)/);

if (!nameMatch) {
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: "Êù°‰ª∂„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè"
  });
}

const shopName = nameMatch[1].trim().replace(/\s+/g, "");
const selectedShop = previous.allShops.find(s => s.name.replace(/\s+/g, "").includes(shopName));

if (!selectedShop) {
  console.error(`‚ùå ÈÅ∏ÂÆö„Åï„Çå„Åü„ÅäÂ∫ó„Äå${shopName}„Äç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`);
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: `ÈÅ∏ÂÆö„Åï„Çå„Åü„ÅäÂ∫ó„Äå${shopName}„Äç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè`
  });
}

selectedShop.generatedIntro = introMatch?.[1]?.trim() || "Èõ∞Âõ≤Ê∞ó„ÅÆËâØ„ÅÑ„Åä„Åô„Åô„ÇÅÂ∫ó„Åß„Åô„ÄÇ";
selectedShop.generatedItem = itemMatch?.[1]?.trim() || "ÊñôÁêÜ„ÅÆ„Åä„Åô„Åô„ÇÅÊÉÖÂ†±„ÅØÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ";
selectedShop.generatedTags = tagMatch?.[1]?.trim() || "#„Åä„Åô„Åô„ÇÅ";

sessionStore[userId] = {
  original: `${previous.original} ${userInput}`,
  allShops: previous.allShops,
  shown: previous.shown.concat(selectedShop.name),
  previousStructure: finalStructure
};



  const bubble = {
    type: "bubble",
    hero: {
      type: "image",
      url: selectedShop.photo.pc.l,
      size: "full",
      aspectRatio: "4:3",
      aspectMode: "cover"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "xs",
      contents: [
        { type: "text", text: selectedShop.name, weight: "bold", size: "md", wrap: true },
        { type: "text", text: selectedShop.generatedTags, size: "sm", color: "#555555", wrap: true },
        { type: "text", text: `üìñ „ÄêÁ¥π‰ªãÊñá„Äë\n${selectedShop.generatedIntro}`, size: "sm", wrap: true },
        { type: "text", text: `üç¥ „Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\n${selectedShop.generatedItem}`, size: "sm", wrap: true },
        { type: "text", text: `üí¥ ${selectedShop.budget.name}`, size: "sm", color: "#ff6600" },
        { type: "text", text: selectedShop.non_smoking ? `üö¨ ${selectedShop.non_smoking}` : "üö¨ Âñ´ÁÖôÊÉÖÂ†±„Å™„Åó", size: "sm", color: "#888888" },
        { type: "text", text: selectedShop.address || "üìç ‰ΩèÊâÄÊÉÖÂ†±„Å™„Åó", size: "sm", color: "#888888", wrap: true }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [{
        type: "button",
        style: "primary",
        action: { type: "uri", label: "Ë©≥Á¥∞„ÇíË¶ã„Çã", uri: selectedShop.urls.pc }
      }]
    }
  };
  await userDB.updateOne(
  { userId },
  { $inc: { usageCount: 1 }, $set: { updatedAt: new Date() } }
);

  return client.replyMessage(event.replyToken, {
    type: "flex",
    altText: "„ÅîÂ∏åÊúõ„Å´Âêà„Çè„Åõ„Å¶„ÅäÂ∫ó„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„Åó„ÅüÔºÅ",
    contents: bubble
  });
}

// ‚úÖ ÂÆåÂÖ®Áâà„ÄåÈÅï„ÅÜÂ∫ó„Äç‰øÆÊ≠£Áâà„Ç≥„Éº„Éâ
if ((userInput.includes("ÈÅï„ÅÜ") || userInput.includes("‰ªñ")|| userInput.includes("Ê¨°")) && sessionStore[userId]) {
  // üî•„ÄêÂà©Áî®ÂõûÊï∞„Ç´„Ç¶„É≥„Éà„ÄëÔºàÂêÑ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÂÖàÈ†≠„Å´ÂÖ•„Çå„ÇãÔºâ

const userDocUpdated = await userDB.findOne({ userId });

let usageLimit = 1; // ÁÑ°Êñô„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
if (userDocUpdated.subscribed) {
  switch (userDocUpdated.planId) {
    case "price_1Rc4DbCE2c7uO9vomtr7CWPk":
      usageLimit = 20;
      break;
    case "price_1RgOITCE2c7uO9vor59pbAx2":
      usageLimit = 40;
      break;
    case "price_1RgOJzCE2c7uO9voM5P9BmIH":
      usageLimit = Infinity;
      break;
  }
}

// Âà©Áî®‰∏äÈôê„ÇíË∂Ö„Åà„ÅüÂ†¥Âêà„ÅÆÂá¶ÁêÜ
if (userDocUpdated.usageCount > usageLimit) {
  await client.replyMessage(event.replyToken, {
    type: "text",
    text: "üîí ÊúàÈñì„ÅÆÂà©Áî®ÂõûÊï∞„ÇíË∂Ö„Åà„Åæ„Åó„Åü„ÄÇ„ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ",
    quickReply: {
      items: [
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éô„Éº„Ç∑„ÉÉ„ÇØÔºàÊúà500ÂÜÜ„Éª20ÂõûÔºâ",
            data: "action=selectPlan&plan=basic",
            displayText: "„Éô„Éº„Ç∑„ÉÉ„ÇØ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Çπ„Çø„É≥„ÉÄ„Éº„ÉâÔºàÊúà1000ÂÜÜ„Éª40ÂõûÔºâ",
            data: "action=selectPlan&plan=standard",
            displayText: "„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éó„É¨„Éü„Ç¢„É†ÔºàÊúà2000ÂÜÜ„ÉªÁÑ°Âà∂ÈôêÔºâ",
            data: "action=selectPlan&plan=premium",
            displayText: "„Éó„É¨„Éü„Ç¢„É†„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        }
      ]
    }
  });
  return;
}

console.log(`üü¢ Âà©Áî®ÂõûÊï∞: ${userDocUpdated.usageCount}/${usageLimit}`);

  const previous = sessionStore[userId];
  const remaining = previous.allShops.filter(s => !previous.shown.includes(s.name));

  const prevLocation = previous.previousStructure.location || "";
  const prevGenre = previous.previousStructure.genre || "";
  const prevKeyword = previous.previousStructure.keyword || "";

  if (remaining.length === 0) {
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: "„Åô„Åß„Å´„Åô„Åπ„Å¶„ÅÆ„ÅäÂ∫ó„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„Åó„ÅüÔºÅ„Åæ„ÅüÊúÄÂàù„Åã„ÇâÊù°‰ª∂„ÇíÈÄÅ„Å£„Å¶„Åè„Å†„Åï„ÅÑüôè"
    });
  }

  const shopList = remaining.map(s => `Â∫óÂêç: ${s.name} / Á¥π‰ªã: ${s.catch}`).join("\n");

  await client.pushMessage(userId, {
    type: "text",
    text: "üîé „ÅîÂ∏åÊúõ„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÇíÊ§úÁ¥¢„Åó„Å¶„ÅÑ„Åæ„Åô‚Ä¶\nÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„Åî„Åñ„ÅÑ„Åæ„Åô.\nÂ∞ë„Åó„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑüôá‚Äç‚ôÇÔ∏è"
  });

  const prompt = `
„É¶„Éº„Ç∂„Éº„ÅÆÂ∏åÊúõ„ÅØ„Äå${previous.original}„Äç„Åß„Åô„ÄÇ
ÊúÄÂàù„Å´Ê§úÁ¥¢„Åó„ÅüÂ†¥ÊâÄ„ÅØ„Äå${prevLocation}„Äç„ÄÅ„Ç∏„É£„É≥„É´„ÅØ„Äå${prevGenre}„Äç„ÄÅ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅØ„Äå${prevKeyword}„Äç„Åß„Åô„ÄÇ
ÂøÖ„Åö„Åì„Çå„Çâ„ÅÆÊù°‰ª∂„ÇíË∏è„Åæ„Åà„ÄÅ„Åæ„Å†Á¥π‰ªã„Åó„Å¶„ÅÑ„Å™„ÅÑ„ÅäÂ∫ó„Çí1Â∫óËàóÈÅ∏„Å≥„ÄÅ‰ª•‰∏ã„ÅÆÈ£≤È£üÂ∫óÊÉÖÂ†±„Çí„ÇÇ„Å®„Å´„ÄÅ
„ÄêÁ¥π‰ªãÊñá„Äë„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë„Äê„Çø„Ç∞„Äë„Çí„É¶„Éº„Ç∂„Éº„ÅÆÂç∞Ë±°„Å´ÊÆã„Çã„Çà„ÅÜÈ≠ÖÂäõÁöÑ„Å´Ëá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßÁ∞°ÊΩî„Å´ÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åæ„Åü„ÄÅ„É¶„Éº„Ç∂„Éº„Åå‰∏ÄÁõÆ„ÅßË¶ã„ÇÑ„Åô„ÅÑ„Çà„ÅÜ„Å´Á¥π‰ªãÊñá„ÇíÂ∑•Â§´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‚ñºÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºö
„ÄêÁ¥π‰ªãÊñá„Äë
„ÉªÂ∫óÂêç„ÅÆ„ÅÇ„Å®„Å´„ÅØÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÈ°îÊñáÂ≠ó„ÇÑÁµµÊñáÂ≠ó„ÇÇ1„Å§Ê∑ª„Åà„Çã„Å®È≠ÖÂäõÁöÑ„Åß„Åô
„ÉªÂÖ®‰Ωì„Åß2Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÂ∫óÂêç„Çí„ÄäÂ∫óÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë
„ÉªÊñôÁêÜÂêç„ÅÆ„ÅÇ„Å®„Å´ÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÂÖ®‰Ωì„Åß1Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÊñôÁêÜÂêç„Çí„ÄäÊñôÁêÜÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Çø„Ç∞„Äë
È£≤È£üÂ∫óÊÉÖÂ†±„Åã„Çâ„ÄÅInstagramÈ¢®„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Å®„Åó„Å¶‰Ωø„Åà„Çã„ÄÅ„ÇÇ„Å£„Å®„ÇÇÊúÄÈÅ©„Å™„Åù„ÅÆ„ÅäÂ∫ó„ÅÆÁâπÂæ¥„Çí„Ç≠„Éº„ÉØ„Éº„Éâ„Çí3„Å§Êó•Êú¨Ë™û„ÅßÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n#Ë®òÂè∑„Çí„Å§„Åë„Å¶1Ë°å„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö#„Éá„Éº„Éà #Â§úÊôØ #„Ç≥„Çπ„ÉëÔºâ

Â∫óËàó„É™„Çπ„ÉàÔºö
${shopList}`;

  const gptRes = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [{ role: "system", content: prompt }]
  });

  const responseText = gptRes.choices[0].message.content;

  // üëá Ê≠£„Åó„ÅènameMatch„ÇíÂÆöÁæ©„Åô„Çã„Ç≥„Éº„ÉâÔºà„Åì„Åì„ÅåÊäú„Åë„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„ÅåÈ´ò„ÅÑÔºâ
  const nameMatch = responseText.match(/„ÄêÁ¥π‰ªãÊñá„Äë[\s\S]*?„Ää(.+?)„Äã/);
  const introMatch = responseText.match(/„ÄêÁ¥π‰ªãÊñá„Äë\s*[\s\S]*?„Ää.+?„Äã([\s\S]*?)„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë/);
  const itemMatch = responseText.match(/„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\s*„Ää(.+?)„Äã\s*([\s\S]*?)„Äê„Çø„Ç∞„Äë/);
  const tagMatch = responseText.match(/„Äê„Çø„Ç∞„Äë\s*(.+)/);

  if (!nameMatch) {
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: "Â∫óËàó„ÅÆÈÅ∏ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑüôè"
    });
  }

  const shopName = nameMatch[1].trim();
  const selectedShop = remaining.find(s => s.name === shopName);

  if (!selectedShop) {
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: "ÈÅ∏ÂÆö„Åï„Çå„Åü„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè"
    });
  }

  selectedShop.generatedIntro = introMatch?.[1]?.trim() || "Èõ∞Âõ≤Ê∞ó„ÅÆËâØ„ÅÑ„Åä„Åô„Åô„ÇÅÂ∫ó„Åß„Åô„ÄÇ";
  selectedShop.generatedItem = itemMatch ? `„Ää${itemMatch[1]}„Äã\n${itemMatch[2].trim()}` : "ÊñôÁêÜ„ÅÆ„Åä„Åô„Åô„ÇÅÊÉÖÂ†±„ÅØÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ";
  selectedShop.generatedTags = tagMatch?.[1]?.trim() || "#„Åä„Åô„Åô„ÇÅ";

  sessionStore[userId].shown.push(selectedShop.name);

  const bubble = {
    type: "bubble",
    hero: {
      type: "image",
      url: selectedShop.photo.pc.l,
      size: "full",
      aspectRatio: "4:3",
      aspectMode: "cover"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "xs",
      contents: [
        { type: "text", text: selectedShop.name, weight: "bold", size: "md", wrap: true },
        { type: "text", text: selectedShop.generatedTags, size: "sm", color: "#555555", wrap: true },
        { type: "text", text: `üìñ„ÄêÁ¥π‰ªãÊñá„Äë\n${selectedShop.generatedIntro}`, size: "sm", wrap: true },
        { type: "text", text: `üç¥„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\n${selectedShop.generatedItem}`, size: "sm", wrap: true },
        {
          type: "text",
          text: /^[0-9]{3,4}[„Äú~„Éº‚àíÔºç]{1}[0-9]{3,4}ÂÜÜ$/.test(selectedShop.budget.name)
            ? `üí¥ ${selectedShop.budget.name}` : "üí¥ ÊÉÖÂ†±Êú™ÂÆö",
          size: "sm", color: "#ff6600"
        },
        { type: "text", text: selectedShop.non_smoking ? `üö¨ ${selectedShop.non_smoking}` : "üö¨ Âñ´ÁÖôÊÉÖÂ†±„Å™„Åó", size: "sm", color: "#888888" },
        { type: "text", text: selectedShop.address || "üìç ‰ΩèÊâÄÊÉÖÂ†±„Å™„Åó", size: "sm", color: "#888888", wrap: true }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
        {
          type: "button",
          style: "primary",
          action: {
            type: "uri",
            label: "Ë©≥Á¥∞„ÇíË¶ã„Çã",
            uri: selectedShop.urls.pc
          }
        }
      ]
    }
  };
  await userDB.updateOne(
  { userId },
  { $inc: { usageCount: 1 }, $set: { updatedAt: new Date() } }
);

  return client.replyMessage(event.replyToken, {
    type: "flex",
    altText: "‰ªñ„ÅÆÂÄôË£ú„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„ÅôÔºÅ",
    contents: bubble
  });
}

if (!sessionStore[userId]) {

// ‚úÖ ÈÄöÂ∏∏„ÅÆÂàùÂõûÊ§úÁ¥¢„É™„ÇØ„Ç®„Çπ„ÉàÔºàÂ†¥ÊâÄÔºã„Ç∏„É£„É≥„É´Ôºã„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊüîËªü„Å´ÂØæÂøúÔºâ
// üî•„ÄêÂà©Áî®ÂõûÊï∞„Ç´„Ç¶„É≥„Éà„ÄëÔºàÂêÑ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÂÖàÈ†≠„Å´ÂÖ•„Çå„ÇãÔºâ

const userDocUpdated = await userDB.findOne({ userId });

let usageLimit = 1; // ÁÑ°Êñô„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§
if (userDocUpdated.subscribed) {
  switch (userDocUpdated.planId) {
    case "price_1Rc4DbCE2c7uO9vomtr7CWPk":
      usageLimit = 20;
      break;
    case "price_1RgOITCE2c7uO9vor59pbAx2":
      usageLimit = 40;
      break;
    case "price_1RgOJzCE2c7uO9voM5P9BmIH":
      usageLimit = Infinity;
      break;
  }
}

// Âà©Áî®‰∏äÈôê„ÇíË∂Ö„Åà„ÅüÂ†¥Âêà„ÅÆÂá¶ÁêÜ
if (userDocUpdated.usageCount > usageLimit) {
  await client.replyMessage(event.replyToken, {
    type: "text",
    text: "üîí ÊúàÈñì„ÅÆÂà©Áî®ÂõûÊï∞„ÇíË∂Ö„Åà„Åæ„Åó„Åü„ÄÇ„ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ",
    quickReply: {
      items: [
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éô„Éº„Ç∑„ÉÉ„ÇØÔºàÊúà500ÂÜÜ„Éª20ÂõûÔºâ",
            data: "action=selectPlan&plan=basic",
            displayText: "„Éô„Éº„Ç∑„ÉÉ„ÇØ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Çπ„Çø„É≥„ÉÄ„Éº„ÉâÔºàÊúà1000ÂÜÜ„Éª40ÂõûÔºâ",
            data: "action=selectPlan&plan=standard",
            displayText: "„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        },
        {
          type: "action",
          action: {
            type: "postback",
            label: "„Éó„É¨„Éü„Ç¢„É†ÔºàÊúà2000ÂÜÜ„ÉªÁÑ°Âà∂ÈôêÔºâ",
            data: "action=selectPlan&plan=premium",
            displayText: "„Éó„É¨„Éü„Ç¢„É†„Éó„É©„É≥„ÇíÈÅ∏Êäû"
          }
        }
      ]
    }
  });
  return;
}

console.log(`üü¢ Âà©Áî®ÂõûÊï∞: ${userDocUpdated.usageCount}/${usageLimit}`);

const gptExtractInitial  = await openai.chat.completions.create({
  model: "gpt-4",
  messages: [
    {
      role: "system",
      content: `Ê¨°„ÅÆÊó•Êú¨Ë™ûÊñá„Åã„Çâ‰ª•‰∏ã„ÇíÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\nÂ†¥ÊâÄ:\n„Ç∏„É£„É≥„É´:\n‰∫àÁÆó:\n„Ç≠„Éº„ÉØ„Éº„Éâ:\n„Ç≠„Éº„ÉØ„Éº„ÉâÂÄôË£ú„Å®„Åó„Å¶‰ª•‰∏ã„ÇíÂèÇËÄÉ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n${keywordSuggestions.join(", ")}`
    },
    { role: "user", content: userInput }
  ]
});

const parsed = gptExtractInitial .choices[0].message.content;
const location = parsed.match(/Â†¥ÊâÄ:\s*(.*)/)?.[1]?.trim() || "";
const genre = parsed.match(/„Ç∏„É£„É≥„É´:\s*(.*)/)?.[1]?.trim() || "";
const keyword = parsed.match(/„Ç≠„Éº„ÉØ„Éº„Éâ:\s*(.*)/)?.[1]?.trim() || "";
const budget = parsed.match(/‰∫àÁÆó:\s*(.*)/)?.[1]?.trim() || "";

await client.pushMessage(userId, {
  type: "text",
  text: "üîé „ÅîÂ∏åÊúõ„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÇíÊ§úÁ¥¢„Åó„Å¶„ÅÑ„Åæ„Åô‚Ä¶\nÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„Åî„Åñ„ÅÑ„Åæ„Åô.\nÂ∞ë„Åó„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑüôá‚Äç‚ôÇÔ∏è"
});

const genreCode = genreMap[genre] || "";
const budgetCode = budgetMap[budget] || "";
const filters = "";

const allShops = await fetchShops(`${location} ${keyword || ""} ${filters}`.trim(), genreCode, budgetCode);

if (allShops.length === 0) {
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: "Êù°‰ª∂„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè"
  });
}

const shopList = allShops.map(s => `Â∫óÂêç: ${s.name} / Á¥π‰ªã: ${s.catch}`).join("\n");
const filterPrompt = `„É¶„Éº„Ç∂„Éº„ÅÆÂ∏åÊúõ„ÅØ„Äå${userInput}„Äç„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆ„ÅäÂ∫ó„Åã„ÇâÂ∏åÊúõ„Å´Âêà„ÅÑ„Åù„ÅÜ„Å™1‰ª∂„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ„Åß„Åç„Çå„Å∞„Äå${keyword}„Äç„ÅÆË¶ÅÁ¥†„ÅåÂÖ•„Å£„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„ÇíÂÑ™ÂÖà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nÂΩ¢ÂºèÔºö\n- Â∫óÂêç: ‚óã‚óã‚óã\n- ÁêÜÁî±: ‚óã‚óã‚óã`;

const gptPick = await openai.chat.completions.create({
  model: "gpt-4",
  messages: [
    { role: "system", content: filterPrompt },
    { role: "user", content: shopList }
  ]
});

const selectedNames = extractShopNames(gptPick.choices[0].message.content);
const selected = allShops.filter(s => selectedNames.includes(s.name));

const shopInfos = selected.map(shop => 
  `Â∫óÂêç: ${shop.name}\n„Ç∏„É£„É≥„É´: ${shop.genre.name}\nÁ¥π‰ªã: ${shop.catch}\n‰∫àÁÆó: ${shop.budget.name}\nÂñ∂Ê•≠ÊôÇÈñì: ${shop.open}`
).join("\n\n");

const detailPrompt = `
‰ª•‰∏ã„ÅÆÈ£≤È£üÂ∫óÊÉÖÂ†±„Çí„ÇÇ„Å®„Å´„ÄÅ„ÄêÁ¥π‰ªãÊñá„Äë„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë„Äê„Çø„Ç∞„Äë„Çí„É¶„Éº„Ç∂„Éº„ÅÆÂç∞Ë±°„Å´ÊÆã„Çã„Çà„ÅÜÈ≠ÖÂäõÁöÑ„Å´Ëá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßÁ∞°ÊΩî„Å´ÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åæ„Åü„ÄÅ„É¶„Éº„Ç∂„Éº„Åå‰∏ÄÁõÆ„ÅßË¶ã„ÇÑ„Åô„ÅÑ„Çà„ÅÜ„Å´Á¥π‰ªãÊñá„ÇíÂ∑•Â§´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‚ñºÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàÂêÑÂ∫óËàóÂøÖ„Åö„Åì„ÅÆÂΩ¢ÂºèÔºâÔºö
„ÄêÂ∫óËàó„Äë
„ÄêÁ¥π‰ªãÊñá„Äë
„ÉªÂ∫óÂêç„ÅÆ„ÅÇ„Å®„Å´„ÅØÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÈ°îÊñáÂ≠ó„ÇÑÁµµÊñáÂ≠ó„ÇÇ1„Å§Ê∑ª„Åà„Çã„Å®È≠ÖÂäõÁöÑ„Åß„Åô
„ÉªÂÖ®‰Ωì„Åß2Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÂ∫óÂêç„Çí„ÄäÂ∫óÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë
„ÉªÊñôÁêÜÂêç„ÅÆ„ÅÇ„Å®„Å´ÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÂÖ®‰Ωì„Åß1Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÊñôÁêÜÂêç„Çí„ÄäÊñôÁêÜÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ
„Äê„Çø„Ç∞„Äë
È£≤È£üÂ∫óÊÉÖÂ†±„Åã„Çâ„ÄÅInstagramÈ¢®„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Å®„Åó„Å¶‰Ωø„Åà„Çã„ÄÅ„ÇÇ„Å£„Å®„ÇÇÊúÄÈÅ©„Å™„Åù„ÅÆ„ÅäÂ∫ó„ÅÆÁâπÂæ¥„Çí„Ç≠„Éº„ÉØ„Éº„Éâ„Çí3„Å§Êó•Êú¨Ë™û„ÅßÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n#Ë®òÂè∑„Çí„Å§„Åë„Å¶1Ë°å„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö#„Éá„Éº„Éà #Â§úÊôØ #„Ç≥„Çπ„ÉëÔºâ

‚ñº Â∫óËàó„É™„Çπ„ÉàÔºö
${shopInfos}
`;

const gptResponse = await openai.chat.completions.create({
  model: "gpt-4",
  messages: [{ role: "system", content: detailPrompt }]
});

const shopResponses = gptResponse.choices[0].message.content.split("„ÄêÂ∫óËàó„Äë").slice(1);

shopResponses.forEach((shopResponse, index) => {
  const shop = selected[index];

  const introMatch = shopResponse.match(/„ÄêÁ¥π‰ªãÊñá„Äë\s*([\s\S]*?)\s*(?=„Äê|$)/);
  const itemMatch = shopResponse.match(/„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\s*([\s\S]*?)\s*(?=„Äê|$)/);
  const tagMatch = shopResponse.match(/„Äê„Çø„Ç∞„Äë\s*([\s\S]*?)\s*(?=„Äê|$)/);

  shop.generatedIntro = introMatch?.[1]?.trim() || "Èõ∞Âõ≤Ê∞ó„ÅÆËâØ„ÅÑ„Åä„Åô„Åô„ÇÅÂ∫ó„Åß„Åô„ÄÇ";
  shop.generatedItem = itemMatch?.[1]?.trim() || "ÊñôÁêÜ„ÅÆ„Åä„Åô„Åô„ÇÅÊÉÖÂ†±„ÅØÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ";
  shop.generatedTags = tagMatch?.[1]?.trim() || "#„Åä„Åô„Åô„ÇÅ";
});

sessionStore[userId] = {
  original: userInput,
  allShops,
  shown: selected.map(s => s.name),
  previousStructure: { location, genre, keyword }
};

        if (selected.length === 0) {
          return client.replyMessage(event.replyToken, { type: "text", text: "Êù°‰ª∂„Å´Ëøë„ÅÑ„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè" });
        }

        const bubbles = selected.map(shop => ({
          type: "bubble",
          hero: {
            type: "image",
            url: shop.photo.pc.l,
            size: "full",
            aspectRatio: "4:3",
            aspectMode: "cover"
          },
          body: {
            type: "box",
            layout: "vertical",
            spacing: "xs",
            contents: [
              { type: "text", text: shop.name, weight: "bold", size: "md", wrap: true },
              { type: "text", text: shop.generatedTags, size: "sm", color: "#555555", wrap: true },              { type: "text", text: `üìñ „ÄêÁ¥π‰ªãÊñá„Äë\n${shop.generatedIntro}`, size: "sm", wrap: true },
              { type: "text", text: `üç¥ „Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\n${shop.generatedItem}`, size: "sm", wrap: true },
              { type: "text", text: `üí¥ ${shop.budget.name}`, size: "sm", color: "#ff6600" },
              { type: "text", text: shop.non_smoking ? `üö¨ ${shop.non_smoking}` : "üö¨ Âñ´ÁÖôÊÉÖÂ†±„Å™„Åó",size: "sm",color: "#888888"},
              {type: "text",text: shop.address || "üìç ‰ΩèÊâÄÊÉÖÂ†±„Å™„Åó",size: "sm",color: "#888888",wrap: true}
              ]
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "button",
                style: "primary",
                action: {
                  type: "uri",
                  label: "Ë©≥Á¥∞„ÇíË¶ã„Çã",
                  uri: shop.urls.pc
                }
              }
            ]
          }
        }));
 await userDB.updateOne(
  { userId },
  { $inc: { usageCount: 1 }, $set: { updatedAt: new Date() } }
)


        await client.replyMessage(event.replyToken, [
          {
            type: "flex",
            altText: "„Åä„Åô„Åô„ÇÅ„ÅÆ„ÅäÂ∫ó„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„ÅôÔºÅ",
            contents: {
              type: "carousel",
              contents: bubbles
            }
          },
          {
            type: "text",
            text: "Ê∞ó„Å´ÂÖ•„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ‰ªñ„ÅÆÂÄôË£ú„ÇÇË¶ã„Å¶„Åø„Åæ„Åô„ÅãÔºü",
            quickReply: {
              items: [
                {
                  type: "action",
                  action: {
                    type: "message",
                    label: "ÈÅï„ÅÜÂ∫ó„ÅåË¶ã„Åü„ÅÑ",
                    text: "ÈÅï„ÅÜÂ∫ó"
                  }
                }
              ]
            }
          }
        ]);
      }

      else {
  // üî•„ÄêÂÆåÂÖ®Êñ∞Ë¶èÊù°‰ª∂„ÇíÂÜçÊ§úÁ¥¢„ÄëÊñ∞Ë¶èÂÖ•Âäõ„ÇíÊ§úÂá∫„ÅósessionStore„Çí„É™„Çª„ÉÉ„Éà
  
  delete sessionStore[userId];  // ÂÆâÂÖ®„ÅÆ„Åü„ÇÅÂÜçÂ∫¶ÊòéÁ§∫ÁöÑ„Å´„É™„Çª„ÉÉ„Éà
  
  const userDocUpdated = await userDB.findOne({ userId });

  let usageLimit = 1; 
  if (userDocUpdated.subscribed) {
    switch (userDocUpdated.planId) {
      case "price_1Rc4DbCE2c7uO9vomtr7CWPk":
        usageLimit = 20;
        break;
      case "price_1RgOITCE2c7uO9vor59pbAx2":
        usageLimit = 40;
        break;
      case "price_1RgOJzCE2c7uO9voM5P9BmIH":
        usageLimit = Infinity;
        break;
    }
  }

  if (userDocUpdated.usageCount >= usageLimit) {
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: "üîí ÊúàÈñì„ÅÆÂà©Áî®ÂõûÊï∞„ÇíË∂Ö„Åà„Åæ„Åó„Åü„ÄÇ„ÅîÂ∏åÊúõ„ÅÆ„Éó„É©„É≥„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ",
      quickReply: {
        items: Object.entries(stripePlans).map(([planKey, details]) => ({
          type: "action",
          action: {
            type: "postback",
            label: details.label,
            data: `action=selectPlan&plan=${planKey}`,
            displayText: `${details.label}„ÇíÈÅ∏Êäû`
          }
        }))
      }
    });
  }

  await client.pushMessage(userId, {
    type: "text",
    text: "üîé „ÅîÂ∏åÊúõ„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÇíÊ§úÁ¥¢„Åó„Å¶„ÅÑ„Åæ„Åô‚Ä¶\nÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ\nÂ∞ë„Åó„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑüôá‚Äç‚ôÇÔ∏è"
  });

  const gptExtractInitial = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content: `Ê¨°„ÅÆÊó•Êú¨Ë™ûÊñá„Åã„Çâ‰ª•‰∏ã„ÇíÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\nÂ†¥ÊâÄ:\n„Ç∏„É£„É≥„É´:\n‰∫àÁÆó:\n„Ç≠„Éº„ÉØ„Éº„Éâ:\n„Ç≠„Éº„ÉØ„Éº„ÉâÂÄôË£ú„Å®„Åó„Å¶‰ª•‰∏ã„ÇíÂèÇËÄÉ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n${keywordSuggestions.join(", ")}`
      },
      { role: "user", content: userInput }
    ]
  });

  const parsed = gptExtractInitial.choices[0].message.content;
  const location = parsed.match(/Â†¥ÊâÄ:\s*(.*)/)?.[1]?.trim() || "";
  const genre = parsed.match(/„Ç∏„É£„É≥„É´:\s*(.*)/)?.[1]?.trim() || "";
  const keyword = parsed.match(/„Ç≠„Éº„ÉØ„Éº„Éâ:\s*(.*)/)?.[1]?.trim() || "";
  const budget = parsed.match(/‰∫àÁÆó:\s*(.*)/)?.[1]?.trim() || "";

  const genreCode = genreMap[genre] || "";
  const budgetCode = budgetMap[budget] || "";

  const allShops = await fetchShops(`${location} ${keyword || ""}`.trim(), genreCode, budgetCode);

  if (allShops.length === 0) {
    return client.replyMessage(event.replyToken, {
      type: "text",
      text: "Êù°‰ª∂„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè"
    });
  }

  console.log("üü¢ GPT„Å∏„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô");

  const shopList = allShops
    .map(s => `Â∫óÂêç: ${s.name} / „Ç∏„É£„É≥„É´: ${s.genre.name} / Á¥π‰ªã: ${s.catch}`)
    .join("\n");

  const detailPrompt = `
„É¶„Éº„Ç∂„Éº„ÅÆÂ∏åÊúõ„ÅØ„Äå${userInput}„Äç„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆÂ∫óËàó„É™„Çπ„Éà„Åã„ÇâÊúÄÈÅ©„Å™„ÅäÂ∫ó„ÇíÊúÄÂ§ß1‰ª∂ÈÅ∏„Å≥„ÄÅ„Åù„Çå„Åû„Çå„ÄêÁ¥π‰ªãÊñá„Äë„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë„Äê„Çø„Ç∞„Äë„Çí„É¶„Éº„Ç∂„Éº„ÅÆÂç∞Ë±°„Å´ÊÆã„Çã„Çà„ÅÜÈ≠ÖÂäõÁöÑ„Å´Ëá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßÁ∞°ÊΩî„Å´ÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åæ„Åü„ÄÅ„É¶„Éº„Ç∂„Éº„Åå‰∏ÄÁõÆ„ÅßË¶ã„ÇÑ„Åô„ÅÑ„Çà„ÅÜ„Å´Á¥π‰ªãÊñá„ÇíÂ∑•Â§´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‚ñºÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàÂêÑÂ∫óËàóÂøÖ„Åö„Åì„ÅÆÂΩ¢ÂºèÔºâÔºö
„ÄêÂ∫óËàó„Äë
„ÄêÁ¥π‰ªãÊñá„Äë
„ÉªÂ∫óÂêç„ÅÆ„ÅÇ„Å®„Å´„ÅØÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÈ°îÊñáÂ≠ó„ÇÑÁµµÊñáÂ≠ó„ÇÇ1„Å§Ê∑ª„Åà„Çã„Å®È≠ÖÂäõÁöÑ„Åß„Åô
„ÉªÂÖ®‰Ωì„Åß2Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÂ∫óÂêç„Çí„ÄäÂ∫óÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë
„ÉªÊñôÁêÜÂêç„ÅÆ„ÅÇ„Å®„Å´ÂøÖ„ÅöÊîπË°å„Åó„ÄÅÊ¨°„ÅÆË™¨ÊòéÊñá„Å∏
„ÉªÂÖ®‰Ωì„Åß1Ë°å‰ª•ÂÜÖ„ÇíÁõÆÂÆâ„Å´„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ
„ÉªÊñôÁêÜÂêç„Çí„ÄäÊñôÁêÜÂêç„Äã„ÅßÂõ≤„Å£„Å¶„Åè„Å†„Åï„ÅÑ
„Äê„Çø„Ç∞„Äë
È£≤È£üÂ∫óÊÉÖÂ†±„Åã„Çâ„ÄÅInstagramÈ¢®„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Å®„Åó„Å¶‰Ωø„Åà„Çã„ÄÅ„ÇÇ„Å£„Å®„ÇÇÊúÄÈÅ©„Å™„Åù„ÅÆ„ÅäÂ∫ó„ÅÆÁâπÂæ¥„Çí„Ç≠„Éº„ÉØ„Éº„Éâ„Çí3„Å§Êó•Êú¨Ë™û„ÅßÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n#Ë®òÂè∑„Çí„Å§„Åë„Å¶1Ë°å„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö#„Éá„Éº„Éà #Â§úÊôØ #„Ç≥„Çπ„ÉëÔºâ

Â∫óËàó„É™„Çπ„Éà:
${shopList}
`;

  const gptResponse = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [{ role: "system", content: detailPrompt }]
  });

 const shopsDetails = gptResponse.choices[0].message.content.split("„ÄêÂ∫óËàó„Äë").slice(1).map((detail) => {
  const nameMatch = detail.match(/„Ää(.+?)„Äã/);
  const introMatch = detail.match(/„ÄêÁ¥π‰ªãÊñá„Äë\s*([\s\S]*?)„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë/);
  const itemMatch = detail.match(/„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\s*([\s\S]*?)„Äê„Çø„Ç∞„Äë/);
  const tagMatch = detail.match(/„Äê„Çø„Ç∞„Äë\s*(.+)/);

  const shopName = nameMatch ? nameMatch[1].trim() : "Â∫óÂêçÊú™ÂèñÂæó";
  const foundShop = allShops.find(s => s.name.includes(shopName));

  if (!foundShop) {
    console.error(`‚ùå Â∫óËàó„Äå${shopName}„Äç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`);
    return null;
  }

  return {
    ...foundShop,
    generatedIntro: introMatch?.[1]?.trim() || "Èõ∞Âõ≤Ê∞ó„ÅÆËâØ„ÅÑ„Åä„Åô„Åô„ÇÅÂ∫ó„Åß„Åô„ÄÇ",
    generatedItem: itemMatch?.[1]?.trim() || "„Åä„Åô„Åô„ÇÅÊÉÖÂ†±„Å™„Åó",
    generatedTags: tagMatch?.[1]?.trim() || "#„Åä„Åô„Åô„ÇÅ"
  };
}).filter(Boolean); // ÂøÖ„Åönull„ÇíÈô§Â§ñ„Åó„Å¶ÊúâÂäπ„Å™Â∫óËàó„ÅÆ„ÅøÊäΩÂá∫

if (shopsDetails.length === 0) {
  return client.replyMessage(event.replyToken, {
    type: "text",
    text: "Êù°‰ª∂„Å´Âêà„ÅÜ„ÅäÂ∫ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åüüôè"
  });
}

const bubbles = shopsDetails.map(shop => ({
  type: "bubble",
  hero: {
    type: "image",
    url: shop.photo.pc.l,
    size: "full",
    aspectRatio: "4:3",
    aspectMode: "cover"
  },
  body: {
    type: "box",
    layout: "vertical",
    spacing: "xs",
    contents: [
      { type: "text", text: shop.name, weight: "bold", size: "md", wrap: true },
      { type: "text", text: shop.generatedTags, size: "sm", color: "#555555", wrap: true },
      { type: "text", text: `üìñ„ÄêÁ¥π‰ªãÊñá„Äë\n${shop.generatedIntro}`, size: "sm", wrap: true },
      { type: "text", text: `üç¥„Äê„Åä„Åô„Åô„ÇÅ„ÅÆ‰∏ÄÂìÅ„Äë\n${shop.generatedItem}`, size: "sm", wrap: true },
      { type: "text", text: `üí¥ ${shop.budget.name}`, size: "sm", color: "#ff6600" },
      { type: "text", text: shop.address || "üìç ‰ΩèÊâÄÊÉÖÂ†±„Å™„Åó", size: "sm", color: "#888888", wrap: true }
    ]
  },
  footer: {
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "button",
        style: "primary",
        action: { type: "uri", label: "Ë©≥Á¥∞„ÇíË¶ã„Çã", uri: shop.urls.pc }
      }
    ]
  }
}));

sessionStore[userId] = {
  original: userInput,
  allShops,
  shown: shopsDetails.map(s => s.name),
  previousStructure: { location, genre, keyword }
};

await userDB.updateOne({ userId }, { $inc: { usageCount: 1 }, $set: { updatedAt: new Date() } });

// Â∫óËàóÊï∞„Å´Âøú„Åò„Å¶carousel„Åæ„Åü„ÅØÂçò‰∏Äbubble„ÇíÂá∫„ÅóÂàÜ„Åë
return client.replyMessage(event.replyToken, {
  type: "flex",
  altText: "„ÅîÂ∏åÊúõ„ÅÆ„ÅäÂ∫ó„Çí„ÅîÁ¥π‰ªã„Åó„Åæ„ÅôÔºÅ",
  contents: bubbles.length > 1 ? { type: "carousel", contents: bubbles } : bubbles[0]
});
  }

    // üî• ‰ΩúÊ•≠ÔºîÔºà‰ªäÂõûËøΩÂä†„Åó„ÅüpostbackÂá¶ÁêÜÔºâ
       }  else if (event.type === "postback") {
        const replyToken = event.replyToken;
        const postbackData = new URLSearchParams(event.postback.data);

        if (postbackData.get("action") === "selectPlan") {
          const planKey = postbackData.get("plan");
          const userId = event.source.userId;
          const userDoc = await userDB.findOne({ userId });

          try {
            const response = await axios.post(
              "https://line-gourmet-bot.onrender.com/create-checkout-session",
              { userId, plan: planKey }
            );

            const sessionUrl = response.data.url;

            await client.replyMessage(replyToken, {
              type: "text",
              text: `‚úÖ ÈÅ∏Êäû„Åï„Çå„Åü„Éó„É©„É≥„ÅÆÁôªÈå≤„ÉªÂ§âÊõ¥„ÅØ„Åì„Å°„Çâ„Åã„Çâ„ÅäÊâãÁ∂ö„Åç„Åè„Å†„Åï„ÅÑ„ÄÇ\n${sessionUrl}`
            });

          } catch (err) {
            console.error("‚ùå Checkout Session‰ΩúÊàê„Ç®„É©„Éº:", err);
            await client.replyMessage(replyToken, {
              type: "text",
              text: "‚ö†Ô∏è Ê±∫Ê∏à„É™„É≥„ÇØ„ÅÆ‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ"
            });
          }

          return;
        }
      } // ‚Üê else if (event.type === "postback") „Éñ„É≠„ÉÉ„ÇØÁµÇ‰∫Ü„ÅÆ„Ç´„ÉÉ„Ç≥
 })); // ‚Üê events.map „ÅÆÁµÇ‰∫Ü‰ΩçÁΩÆÔºà„Åì„Åì„Å´Ë®≠ÁΩÆ„Åô„Çã„Åì„Å®„ÅåÊúÄÈáçË¶ÅÔºâ

    res.status(200).end(); // LINE„Å∏„ÅÆÊ≠£Â∏∏„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„ÅôÔºà„Åì„Åì„ÅåÊ≠£Â∏∏„Å™‰ΩçÁΩÆÔºâ

  } catch (err) { // try„Éñ„É≠„ÉÉ„ÇØÁµÇ‰∫ÜÔºÜcatchÈñãÂßã‰ΩçÁΩÆÔºà„Åì„Åì„ÅåÊ≠£Â∏∏„Å™‰ΩçÁΩÆÔºâ
    console.error("‚ùå webhook„Ç®„É©„Éº:", err);
    res.status(500).end();
  } // catch„Éñ„É≠„ÉÉ„ÇØ„ÅÆÁµÇ‰∫Ü‰ΩçÁΩÆÔºà„Åì„Åì„ÅåÊ≠£Â∏∏„Å™‰ΩçÁΩÆÔºâ
}); // app.post("/webhook")„ÅÆÁµÇ‰∫Ü‰ΩçÁΩÆÔºà„Åì„Åì„ÅåÊ≠£Â∏∏„Å™‰ΩçÁΩÆÔºâ
